package databaseconnect;

import ch.ethz.ssh2.*;
import ch.ethz.ssh2.Connection;

//import java.io.*;
import java.io.InputStream;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
//import java.sql.*;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FileExec extends HttpServlet {
    public static String[] rbuf=new String[100];
    public static int lineCount;
	private static final String hostname = "tbtex";
	private static final String userid = "root";
	private static final String password = "h!ked@";
	final int BUFFER_SIZE = 4096;

	

//Copy file form FileExec.java
public void doSCP(int nodeNum) throws IOException {
	
		Connection conn = new Connection(hostname);
		conn.connect();
		boolean result = conn.authenticateWithPassword(userid, password);
		if (result) {
			String BasicPATH="C://Research corner/Eclipse Workplace/DatabaseConnect/files/";
			String PATH =BasicPATH.concat(FileUploaded.UFileName);
			SCPClient scp = conn.createSCPClient();
			scp.put(PATH, "/root/v-minh");
		}
		conn.close();
	}
	
public void doExe(int nodeNum) throws IOException {
	
			lineCount=0;
// connect & login
			Connection conn = new Connection(hostname);
			conn.connect();
			boolean result = conn.authenticateWithPassword(userid, password);
			if (result) {

				


				
//Run file
				Session session = conn.openSession();
				session.execCommand("mpicc -o /root/v-minh/runFile /root/v-minh/"+FileUploaded.UFileName+".c && mpdboot && mpiexec -n "+nodeNum+" /root/v-minh/runFile");
				streamToString(session.getStdout());
				for(int i=0;i<lineCount;i++)
						System.out.println(rbuf[i]);
				session.close();
			}
			conn.close();
	}


	// read InputStream and return output as String
	private void streamToString(InputStream in) throws IOException {
		if (in != null) {           
			                BufferedReader reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
			                while ( (rbuf[lineCount]=reader.readLine()) != null) {
			                    lineCount++;
			                }
		} else {       
		}
	}
	
	private static final long serialVersionUID = 1L;
	public void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws IOException {

		req.setCharacterEncoding("utf-8");
		resp.setContentType("text/html;charset=utf-8");
		PrintWriter writer = resp.getWriter();
		//String w = req.getParameter("nodeNum");
		int n = 3;
		

		writer.println("<html>");
		writer.println("<body>");
			doExe(n);
		writer.println("<p>**********************************************</p>");
		for(int i=0;i<lineCount;i++)
			writer.println("<p>" + rbuf[i] + "</p>");
		writer.println("<p>**********************************************</p>");
		writer.println("</body>");
		writer.println("</html>");
	}
}